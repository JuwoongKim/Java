package org.example.functional_interface.note0001;




public class Info {
    /**
     * 1. 목적
     *
     * ① 함수형 인터페이스 , 람다식 개념정리
     * ② 함수형 인터페이스를 직접 만들고 람다식으로 표현해본다.
     *
     *
     * 2. 정리
     *
     * ① 함수형 인터페이스란
     *     - @funtionalInterface 애터네이션으로 표기된 인터페이스
     *     - 추상메서드가 오직 하나여야함 (두 개 이상일시 컴파일 에러)
     *     - staic method, default method 정의는 제약없음
     *
     *     + 인터페이스 => 구현체 또는 익명 클래스를 통해 추상메서드를 구현하여 객체로 사용가능
     *     + 추상메서드 한 개 조건  => 람다식으로 표현가능 => 람다식 = 특정 형태의 객체 표현 방법
     *
     * ② 람다식
     *     - 함수형 인터페이스의 인스턴스 표현방법으로 사용됨
     *     - 함수형 인터페이스의 객체 표현 => 객체 => 매개변수, 반환값으로 사용
     *     - 결국 람다식은 특수한 형태의 객체 표현 (특수한 텽해 = 단 한개의 추상메서드)
     *
     * 
     * ★ 함수형 인터페이스 = 특수한 형태의 인터페이스
     * ★ 람다식 = 함수형 인터페이스의 인스턴스화 표현 방법 = 함수 모형 = 특수한 형태의 객체임 
     */
}
